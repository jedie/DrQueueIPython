# -*- coding: utf-8 -*-

"""
Console management program for DrQueue.
Copyright (C) 2012 Andreas Schroeder

This file is part of DrQueue.

Licensed under GNU General Public License version 3. See LICENSE for details.
"""

import string
import argparse
import getpass
import DrQueue
from DrQueue import Job as DrQueueJob
from DrQueue import Client as DrQueueClient

# initialize DrQueue client
client = DrQueueClient()

# 
# drqueue job list (list_jobs.py)
# drqueue job add (send_job.py)
# drqueue job delete job_name|job_id (control_job.py)
# drqueue job requeue job_name|job_id (control_job.py)
# 
# drqueue computer list (list_computers.py)
# drqueue computer restart computer_name|conputer_id (control_computer.py)
# drqueue computer pool computer_name|conputer_id pool_name (control_computer.py)
#
# drqueue security lock (drqueue_security)
# drqueue security unlock (drqueue_security)
# 

args_dict = None

def main():
    global args_dict

    # create parent parser for global options
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False, help="verbose output")

    # create the top-level parser
    parser = argparse.ArgumentParser(parents=[parent_parser])
    subparsers = parser.add_subparsers(title="subcommands")

    # create the parser for the job command
    parser_job = subparsers.add_parser("job", help="job management", parents=[parent_parser])

    # create the parsers for job subcommands
    subparsers_job = parser_job.add_subparsers(title="subcommands")
    parser_job_list = subparsers_job.add_parser("list", help="list one or more jobs", parents=[parent_parser])
    parser_job_add = subparsers_job.add_parser("add", help="add a new job", parents=[parent_parser])
    parser_job_stop = subparsers_job.add_parser("stop", help="stop running job", parents=[parent_parser])
    parser_job_kill = subparsers_job.add_parser("kill", help="kill running job", parents=[parent_parser])
    parser_job_delete = subparsers_job.add_parser("delete", help="delete existing job", parents=[parent_parser])
    parser_job_continue = subparsers_job.add_parser("continue", help="continue stopped job", parents=[parent_parser])
    parser_job_rerun = subparsers_job.add_parser("rerun", help="rerun stopped job", parents=[parent_parser])

    # options for job list action
    parser_job_list.add_argument("-i", "--id", help="job id")
    parser_job_list.add_argument("-n", "--name", help="job name")

    # options for job add action
    parser_job_add.add_argument("-s", "--startframe", dest="startframe", default=1, help="first frame")
    parser_job_add.add_argument("-e", "--endframe", dest="endframe", default=1, help="last frame")
    parser_job_add.add_argument("-b", "--blocksize", dest="blocksize", default=1, help="size of block")
    parser_job_add.add_argument("-n", "--name", dest="name", default=None, help="name of job")
    parser_job_add.add_argument("-r", "--renderer", dest="renderer", help="render type (maya|blender|mentalray)")
    parser_job_add.add_argument("-f", "--scenefile", dest="scenefile", default=None, help="path to scenefile")
    parser_job_add.add_argument("-p", "--pool", dest="pool", default=None, help="pool of computers")
    parser_job_add.add_argument("-o", "--options", dest="options", default="{}", help="specific options for renderer as Python dict")
    parser_job_add.add_argument("--retries", dest="retries", default=1, help="number of retries for every task")
    parser_job_add.add_argument("--owner", dest="owner", default=getpass.getuser(), help="Owner of job. Default is current username.")
    parser_job_add.add_argument("--os", dest="os", default=None, help="Operating system")
    parser_job_add.add_argument("--minram", dest="minram", default=0, help="Minimal RAM in GB")
    parser_job_add.add_argument("--mincores", dest="mincores", default=0, help="Minimal CPU cores")
    parser_job_add.add_argument("--send-email", action="store_true", dest="send_email", default=False, help="Send notification email when job is finished")
    parser_job_add.add_argument("--email-recipients", dest="email_recipients", default=None, help="Recipients for notification email")
    parser_job_add.add_argument("-w", "--wait", action="store_true", dest="wait", default=False, help="wait for job to finish")
    
    # create the parser for the computer command
    parser_computer = subparsers.add_parser("computer", help="computer management", parents=[parent_parser])

    # create the parsers for computer subcommands
    subparsers_computer = parser_computer.add_subparsers(title="subcommands")
    parser_computer_list = subparsers_computer.add_parser("list", help="list known computers", parents=[parent_parser])
    parser_computer_restart = subparsers_computer.add_parser("restart", help="restart computer", parents=[parent_parser])
    parser_computer_pool = subparsers_computer.add_parser("pool", help="set pool membership of computers", parents=[parent_parser])

    # options for computer list action
    parser_computer_list.add_argument("-i", "--id", help="computer id")
    parser_computer_list.add_argument("-n", "--name", help="computer name")

    # options for computer restart action
    parser_computer_restart.add_argument("-i", "--id", help="computer id")
    parser_computer_restart.add_argument("-n", "--name", help="computer name")

    # options for computer pool action
    parser_computer_pool.add_argument("-i", "--id", help="computer id")
    parser_computer_pool.add_argument("-n", "--name", help="computer name")
    parser_computer_pool.add_argument("-p", "--pools", help="list of pools")

    
    # create the parser for the security command
    parser_security = subparsers.add_parser("security", help="toggle IPython security folder permissions", parents=[parent_parser])
    parser_security.add_argument("security_action", help="lock / unlock")
    
    #parser_computer.add_argument('--baz', choices='XYZ', help='baz help')
    
    # parse arguments
    args = parser.parse_args()
    args_dict = vars(args)
    
    # debug parsed arguments
    print args
    print args_dict
    
    if ("job_action" in args_dict):
        # drqueue job list
        if args_dict["job_action"] == "list":
            print "user chose list action"
            if ("id" in args_dict) and (args_dict["id"] != None):
                list_jobs(args_dict["id"], None)
            elif ("name" in args_dict) and (args_dict["name"] != None):
                list_jobs(None, args_dict["name"])
            else:
                list_jobs()
        # drqueue job add
        elif args_dict["job_action"] == "add":
            print "user chose add action"
            add_job()
        # drqueue job stop job_name|job_id
        elif args_dict["job_action"] == "stop":
            print "user chose stop action"
        # drqueue job kill job_name|job_id
        elif args_dict["job_action"] == "kill":
            print "user chose kill action"
        # drqueue job delete job_name|job_id
        elif args_dict["job_action"] == "delete":
            print "user chose delete action"
        # drqueue job continue job_name|job_id
        elif args_dict["job_action"] == "continue":
            print "user chose continue action"
        # drqueue job rerun job_name|job_id
        elif args_dict["job_action"] == "rerun":
            print "user chose rerun action"
        else:
            print("Error: Unknown parameter specified.")
            exit(1)
    
    if ("computer_action" in args_dict):
        # drqueue computer list
        if args_dict["computer_action"] == "list":
            print "user chose list action"
        # drqueue computer restart computer_name|conputer_id
        elif args_dict["computer_action"] == "restart":
            print "user chose restart action"
        # drqueue computer pool computer_name|conputer_id pool_name
        elif args_dict["computer_action"] == "pool":
            print "user chose pool action"
        else:
            print("Error: Unknown parameter specified.")
            exit(1)


def list_jobs(job_id=None, job_name=None):
    global client

    if (job_id != None) and (job_name == None):
        # fetch information about single job
        jobs = [client.query_job_by_id(job_id)]
    elif (job_id == None) and (job_name != None):
        # fetch information about single job
        jobs = [client.query_job_by_name(job_name)]
    else:
        # fetch a list of all jobs
        jobs = client.query_job_list()
        
    # walk through tasks of every job
    for job in jobs:
        tasks = client.query_task_list(job['_id'])
        meantime, time_left, finish_time = client.job_estimated_finish_time(job['_id'])
        frame = job['startframe']
        
        print("\nJob \"%s\" (ID: %s):" % (job['name'], job['_id']))
        print("Overall status: " + client.job_status(job['_id']))
        print("Enabled: %s" % job['enabled'])
        print("Submit time: " + str(job['submit_time']))
        if job['requeue_time'] != False:
            print("Requeue time: "+ str(job['requeue_time']))
        print("Time per task: " + str(meantime))
        if client.query_job_tasks_left(job['_id']) > 0:
            print("Time left: " + str(time_left))
            print("Estimated finish time: " + str(finish_time))
        else:
            print("Finish time: " + str(finish_time))
        if 'pool_name' in job['limits']:
        	print("Pool: " + str(job['limits']['pool_name']))
        else:
        	print("Pool: Not set.")
        print("Task id\t\t\t\t\tframe\tstatus\towner\tcompleted at")
        
        for task in tasks:
            tmsg_id = task['msg_id']
            theader = task['header']
            username = theader['username']
        
            if task['completed'] == None:
                status = "pending"
                print("%s\t%i\t%s\t%s" % (tmsg_id, frame, status, username))
            else:
                result_header = task['result_header']
                result_content = task['result_content']
                status = result_header['status']
                cpl = task['completed']
                print("%s\t%i\t%s\t%s\t%i-%02i-%02i %02i:%02i:%02i" % (tmsg_id, frame, status, username, cpl.year, cpl.month, cpl.day, cpl.hour, cpl.minute, cpl.second))

                if result_header['status'] == 'error':
                	print("  Error was: " + result_content['evalue'])
            if int(job['blocksize']) > 1:
            	frame += int(job['blocksize'])
            else:
            	frame += 1

            # for debugging:
            #print(task)


def add_job():
    global args_dict
    global client

    # set limits
    limits = dict()
    limits['pool_name'] = args_dict["pool"]
    limits['os'] = args_dict["os"]
    limits['minram'] = int(args_dict["minram"])
    limits['mincores'] = int(args_dict["mincores"])

    options_var = eval(args_dict["options"])
    options_var['send_email'] = args_dict["send_email"]
    options_var['email_recipients'] = args_dict["email_recipients"]

    # add standard Blender option
    if (args_dict["renderer"] == "blender") and ("rendertype" not in options_var):
        options_var['rendertype'] = "animation"

    # initialize DrQueue job
    job = DrQueueJob(args_dict["name"], int(args_dict["startframe"]), int(args_dict["endframe"]), int(args_dict["blocksize"]), args_dict["renderer"], args_dict["scenefile"], args_dict["retries"], args_dict["owner"], options_var, "send_job.py", limits)

    # run job with client
    try:
        client.job_run(job)
    except ValueError:
        print("One of your the specified values produced an error:")
        raise
        exit(1)

    # tasks which have been created
    tasks = client.query_task_list(job['_id'])

    # wait for all tasks of job to finish
    if args_dict["wait"]:
        if (tasks == []) and (client.query_computer_list() == []):
            print("Tasks have been sent but no render node is running at the moment.")
            exit(0)

        for task in tasks:
            ar = client.task_wait(task['msg_id'])
            # add some verbose output
            if args_dict["verbose"]:
                cpl = ar.metadata.completed
                msg_id = ar.metadata.msg_id
                status = ar.status
                engine_id = ar.metadata.engine_id
                print("Task %s finished with status '%s' on engine %i at %i-%02i-%02i %02i:%02i:%02i." % (msg_id, status, engine_id, cpl.year, cpl.month, cpl.day, cpl.hour, cpl.minute, cpl.second))
                if ar.pyerr != None:
                    print(ar.pyerr)
        print("Job %s finished." % job['name'])


if __name__ == "__main__":
    main()
